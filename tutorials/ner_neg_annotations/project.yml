title: "Correcting NER annotations by explicitely marking incorrect annotations and fine-tuning the model."
description: "TODO"
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  pretrained_model: "en_core_web_sm"
  orig_beam_model: "./training/beam_original/model-last"
  input_text: "./assets/emerson_input_text.txt"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "scripts", "corpus"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.

assets:
  - dest: "assets/train"
    description: "Training data"

  - dest: "assets/dev"
    description: "Dev data"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - download
    - train_beam
    - evaluate_beam
    - create_annotated_data
    - finetune_beam

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "download"
    help: "Download the pretrained pipeline"
    script:
      - "python -m spacy download ${vars.pretrained_model}"

  - name: "train_beam"
    help: "Train a beam NER on the gold annotations."
    script:
      - python -m spacy train configs/config_train.cfg  --output training/beam_original --paths.train ./assets/train/ --paths.dev ./assets/dev/
    deps:
      - "assets/train"
      - "assets/dev"
    outputs:
      - training/beam_original

  - name: "evaluate_beam"
    help: "Apply the beam model to gold-standard data, and measure accuracy"
    script:
      - "python -m spacy evaluate ${vars.orig_beam_model} ./assets/dev/"
      - "python -m spacy evaluate ${vars.orig_beam_model} ./assets/test/"
    deps:
      - "assets/dev/"
      - "assets/test/"

  - name: "create_annotated_data"
    help: "Create the gold annotation data"
    script:
      - "python scripts/create_binary_data.py ${vars.orig_beam_model} ./assets/dev/ corpus True True True"
      - "python scripts/create_binary_data.py ${vars.orig_beam_model} ./assets/dev/ corpus False True False"
      - "python scripts/create_binary_data.py ${vars.orig_beam_model} ./assets/dev/ corpus True True False"
      - "python scripts/create_binary_data.py ${vars.orig_beam_model} ./assets/dev/ corpus True False True"
    deps:
      - "assets/dev/"
      - ${vars.orig_beam_model}
      - "scripts/create_binary_data.py"

  - name: "finetune_beam"
    help: "Continue training/fine-tuning the beam"
    script:
      - python -m spacy train configs/config_sourced.cfg --paths.train ./corpus/dev_correct_missing.spacy --paths.dev ./assets/dev/  --output ./training/dev_correct_missing --components.beam_ner.source=${vars.orig_beam_model}
      - python -m spacy train configs/config_sourced.cfg --paths.train ./corpus/dev_correct_incorrect_missing.spacy --paths.dev ./assets/dev/  --output ./training/dev_correct_incorrect_missing --components.beam_ner.source=${vars.orig_beam_model}
      - python -m spacy train configs/config_sourced.cfg --paths.train ./corpus/dev_correct_incorrect.spacy --paths.dev ./assets/dev/  --output ./training/dev_correct_incorrect --components.beam_ner.source=${vars.orig_beam_model}
      - python -m spacy train configs/config_sourced.cfg --paths.train ./corpus/dev_incorrect.spacy --paths.dev ./assets/dev/  --output ./training/dev_incorrect --components.beam_ner.source=${vars.orig_beam_model}
    deps:
      - "assets/dev/"
      - ${vars.orig_beam_model}
    outputs:
      - "training/dev_correct_incorrect_missing/model-last"

  - name: clean
    help: "Remove intermediate files"
    script:
      - "rm -rf training/*"
      - "rm -rf corpus/*"